ng-src & ng-href
  src="/images/cats/{{favoriteCat}}" might not work well
    browsers are aggressive about loading images parallel to other content, angular doesn't get a chance to intercept data binding requests.

Expressions
  Goal
    create hooks between template, application logic and data
    prevent application logic from sneaking into the template
  Usage
    mathematic operations   +, -, /, *, %
    comparisons             ==, !=, >, <, >=, <=
    boolean logic           &&, ||, !
    bitwise operations      \^, &, |
    call functions exposed on $scope in controller
    reference arrays and object notation    [], {}, .
  parsing
    computed with angular custom parser not with eval()
    more restrictive
    more forgiving to undefined and null
    no NullPointerException error, Template will simply render nothing
    allows to safely use model values that havn't been set yet

controllers
  responsibilities
    setup initial state of application model
    expose model and functions to the view through $scope
    watch other parts of model for changes and take action
  info
    to keep controller manageable create one controller per functional area in view
    tied to a specific peice of DOM that they are incharge of managing
  defining, wats to associate a controller with DOM
    in template using ng-controller
    associating it with a dynamically loadable DOM template fragment (view), through a route
  nested controllers
    sharing model and functions through an inheritance tree
    actual nesting happens in the scopes
    nested controller gets a $scope which is prototypically inherits from its parent controller's $scope

Publishing Model data with scopes
  ways to setup the model from the template itself
    through an Expressions  
      ng-click='count=3'  => sets the $scope.count to 3
    using ng-model on a form input
      this creates a bi-directional data binding

Observing model changes with $watch
  declaration
    $watch(watchFn, watchAction, deepWatch)
  explaination
    watchFn : string with an angular expression or a function returning the value to watch
      can be called multiple times, should be computationally cheap
    watchAction : function or expression to be called when watchFn changes
      in the function form: function(newValue, oldValue, scope)
    deepWatch : watching individual items in an array or properties in an object
  deregistration
    watch function returns a function that on call will deregister the listener
    var dereg = $scope.$watch('someModel.someProperty', callbackOnChange);
    dereg();
  executing watchFn only when page loads
    don't provide watchAction, just only watchFn
  watching multiple things
    ways
      put them in an array or object and pass deepWatch as true
      watch a concatenated value of the properties
        write an expression to generate concatenated values
        if the list is long, write a function the returns the concatenated value

Organizing Dependencies with Modules
  Modules
    provide a way to group dependencies for a functional area 
    automatically resolve dependencies (Dependency Injection)  
    in most applications it will work well enough to create a single module for all the code you create and put all your dependencies in it
  Services 
    Generally these dependencies are called services
    are singleton
    carry out tasks necessary to support application's functionality
      $location : interacting with browser's location
      $route : switching views based on location (URL)
      $http : communicating with server
    shared across controllers that need them
    good mechanism for communication and sharing state between controllers
    Three functions for creating services
      provider(name, Object or constructor())
        configurable
        complex creation logic
        if pass an object
          it should have $get function which returns service instance
          something like {$get: $getFunction()}
        else
          angular assumes it a constructor, when called, creates instance of service
      factory(name, $getFunction())
        non-configurable 
        complex creation logic
        equivalent to provider(name, {$get: $getFunction()})
      service(name, constructor())
        non-configurable
        simple creation logic
        equivalent to constructor option with provider

Formatting Data with Filters
  allow to transform data for display to the user within an interpolation in template
  using Filters
    {{expressions | filterName : param1 : ...paramN}}
    params are separated by :
    params itself can be angular expressions
  Chaining of Filters
    using pipe (|) symbol
      {{12.9 | currency | number:0}}  will display => $13
  filters should be stateless
  custom filter should be a pure function

Changing Views with Routes and $location
  use $route service for managing show and hiding of templates
  Routes 
    lets you specify, for a URL in the browser, angular should load a template and instantiate a controller to provide context for the template
    









